import 'dart:async';
import 'package:clothapp/Controllers/home_controller.dart';
import 'package:clothapp/Controllers/order_controller.dart';
import 'package:clothapp/Models/product.dart';
import 'package:clothapp/Views/Home/home_screen.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../constant/strings.dart';

class CheckoutPageController extends GetxController {
  final HomeController homeController = Get.put(HomeController());
  final OrderController orderController = Get.put(OrderController());

    final Product product = Get.arguments as Product;

  var selectedPaymentMethod = ''.obs;
  var selectedBank = Strings.selectedBank.obs;

  void setPaymentMethod(String method) {
    selectedPaymentMethod.value = method;
  }

  Future<void> showLoadingDialog() async {
    Get.dialog(
      Center(
        child: CircularProgressIndicator(),
      ),
      barrierDismissible: false,
    );
    await Future.delayed(Duration(seconds: 2));
    Get.back();
  }

  void proceedToPayment(RxList<Product> cartItems) {
    if (selectedPaymentMethod.value.isNotEmpty) {
      if (selectedPaymentMethod.value == Strings.upi) {
        handleUPIPayment();
      } else if (selectedPaymentMethod.value == Strings.netBanking) {
        handleNetBankingPayment();
      } else if (selectedPaymentMethod.value == Strings.cod) {
        handleCODPayment();
      }
    } else {
      Get.snackbar(
        Strings.error,
        Strings.paymentselect,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
    }
  }

  void handleUPIPayment() async {
    await showLoadingDialog();
    Get.dialog(
      AlertDialog(
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Image.asset('images/QR.png', width: 200, height: 200),
            SizedBox(height: 16),
            CountdownTimer(),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                Get.back();
                Get.snackbar(Strings.checkoutFailed,Strings.checkoutUpi,
                    backgroundColor: Colors.red, colorText: Colors.white);
              },
              child: Text(Strings.cancel),
            ),
          ],
        ),
      ),
    );
    await Future.delayed(Duration(seconds: 120));
    Get.back();
    Get.snackbar(Strings.checkoutFailed,Strings.checkoutUpi,
        backgroundColor: Colors.red, colorText: Colors.white);
  }


 

  void handleNetBankingPayment() async {
    await showLoadingDialog();
    Get.dialog(
      AlertDialog(
        content: StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                DropdownButton<String>(
                  value: selectedBank.value,
                  onChanged: (value) {
                    setState(() {
                      selectedBank.value = value!;
                    });
                  },
                  items: [
                    Strings.selectedBank,
                    Strings.sbi,
                    Strings.bob,
                    Strings.hdfc,
                   
                  ].map((String value) {
                    return DropdownMenuItem<String>(
                      value: value,
                      child: Text(value),
                    );
                  }).toList(),
                ),
                if (selectedBank.value != Strings.selectedBank)
                  Column(
                    children: [
                      SizedBox(height: 16),
                      Text(
                       Strings.enterIFSC,
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 16),
                      TextFormField(
                        decoration: InputDecoration(
                          border: OutlineInputBorder(),
                          labelText: Strings.IFSC,
                        ),
                      ),
                    ],
                  ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    if (selectedBank.value == Strings.selectedBank) {
                      Get.snackbar(
                        Strings.error,
                       Strings.paymentselectBank,
                        backgroundColor: Colors.red,
                        colorText: Colors.white,
                      );
                    } else {
                      Get.snackbar(
                        Strings.paymentSuccess,
                        Strings.itemMess,
                        backgroundColor: Colors.green,
                        colorText: Colors.white,
                      );
                      Get.to(() => const SuccessScreen(
                            image: 'images/success.png',
                            title:   Strings.paymentSuccess,
                            subTitle:Strings.itemMess,

                          ));
    
                    }
                  },
                  child: Text(
                  Strings.confirm,
                    style: TextStyle(color: Colors.white),
                  ),
                  style: ButtonStyle(
                    backgroundColor:
                        MaterialStateProperty.all<Color>(Colors.green),
                    padding: MaterialStateProperty.all<EdgeInsetsGeometry>(
                      EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                    ),
                  ),
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    Get.back();
                    Get.snackbar(
                      Strings.checkoutFailed,
                      Strings.checkoutFailedMess,
                      backgroundColor: Colors.red,
                      colorText: Colors.white,
                    );
                  },
                  child: Text(
                   Strings.cancel,
                    style: TextStyle(color: Colors.white),
                  ),
                  style: ButtonStyle(
                    backgroundColor:
                        MaterialStateProperty.all<Color>(Colors.red),
                    padding: MaterialStateProperty.all<EdgeInsetsGeometry>(
                      EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                    ),
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}


void handleCODPayment() async {
  Get.to(() => const SuccessScreen(
        image: 'images/success.png',
        title: Strings.paymentSuccess,
        subTitle: Strings.itemMess,
      ));
  // Get.snackbar(
  //   'Order Placed',
  //   'Your order has been placed successfully.',
  //   backgroundColor: Colors.green,
  //   colorText: Colors.white,
  // );
}

class SuccessScreen extends StatelessWidget {
  final String image;
  final String title;
  final String subTitle;

  const SuccessScreen({
    required this.image,
    required this.title,
    required this.subTitle,
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Image.asset(image),
            SizedBox(height: 16),
            Text(
              title,
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(
              subTitle,
              style: TextStyle(fontSize: 16),
            ),
            ElevatedButton(
              onPressed: () {
               Get.offAll(HomeScreen());
              },
              child: const Text(
                Strings.contin,
                style:
                    TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
              ),
              style: ButtonStyle(
                backgroundColor: MaterialStateProperty.all<Color>(Colors.red),
                padding: MaterialStateProperty.all<EdgeInsetsGeometry>(
                  EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class CountdownTimer extends StatefulWidget {
  @override
  _CountdownTimerState createState() => _CountdownTimerState();
}

class _CountdownTimerState extends State<CountdownTimer> {
  late Timer _timer;
  int _secondsRemaining = 120;

  @override
  void initState() {
    super.initState();
    _startTimer();
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
  }
void proceedToPayment() {
  
}

  void _startTimer() {
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() {
        if (_secondsRemaining > 0) {
          _secondsRemaining--;
        } else {
          timer.cancel();
          Get.back();
          Get.snackbar(Strings.checkoutFailed, Strings.checkoutUpi,
              backgroundColor: Colors.red, colorText: Colors.white);
        }
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    Duration duration = Duration(seconds: _secondsRemaining);
    String minutes = '${duration.inMinutes}'.padLeft(2, '0');
    String seconds = '${duration.inSeconds.remainder(60)}'.padLeft(2, '0');
    return Text(
      'Time Remaining: $minutes:$seconds',
      style: TextStyle(fontWeight: FontWeight.bold),
    );
  }
}
